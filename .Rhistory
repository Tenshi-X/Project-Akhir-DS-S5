)
)
)
# Buatlah faktor dari hasil prediksi
prediction <- factor(prediction, levels = c(0, 0.25, 0.5, 0.75, 1), labels = c(0, 0.25,0.5,0.75,1))
table(actual)
table(prediction)
# Buat confusion matrix
mtab <- table(actual, prediction)
confusionMatrix(mtab)
knitr::opts_chunk$set(echo = TRUE)
library(dslabs)
library(tidyverse)
library(dplyr)
library(here)
library(readxl)
library(utils)
library(vroom)
library(tidytext)
library(readr)
library(here)
library(keras)
library(caret)
library(dplyr)
library(neuralnet)
data_testing <- read_csv(here("nursery_testing.csv"))
head(data_testing)
unique(data_testing$Parent)
unique(data_testing$Has_Nurs)
unique(data_testing$Form)
unique(data_testing$Children)
unique(data_testing$Housing)
unique(data_testing$Finance)
unique(data_testing$Social)
unique(data_testing$Health)
unique(data_testing$Class)
data_training <- read_csv(here("nursery_training.csv"))
head(data_training)
unique(data_training$Parent)
unique(data_training$Has_Nurs)
unique(data_training$Form)
unique(data_training$Children)
unique(data_training$Housing)
unique(data_training$Finance)
unique(data_training$Social)
unique(data_training$Health)
unique(data_training$Class)
names(data_training)
convert_column_to_index <- function(column_data, reference_vector) {
return(match(column_data, reference_vector) - 1)
}
columns_to_process <- names(data_training)
reference_vectors <- lapply(data_training[, columns_to_process, drop = FALSE], unique)
for (col_name in columns_to_process) {
reference_vector <- reference_vectors[[col_name]]
data_training[[col_name]] <- convert_column_to_index(data_training[[col_name]], reference_vector)
}
names(data_testing)
convert_column_to_index <- function(column_data, reference_vector) {
return(match(column_data, reference_vector) - 1)
}
columns_to_process <- names(data_testing)
reference_vectors <- lapply(data_testing[, columns_to_process, drop = FALSE], unique)
for (col_name in columns_to_process) {
reference_vector <- reference_vectors[[col_name]]
data_testing[[col_name]] <- convert_column_to_index(data_testing[[col_name]], reference_vector)
}
for (i in names(data_testing[,-1])) {
data_testing[i] <- (data_testing[i] - min(data_testing[i]))/(max(data_testing[i]) - min(data_testing[i]))
}
for (i in names(data_training[,-1])) {
data_training[i] <- (data_training[i] - min(data_training[i]))/(max(data_training[i]) - min(data_training[i]))
}
n <- neuralnet(Class~.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
plot(n)
output <- compute(n, data_testing[,-1])
results <- data.frame(DataAsli=data_testing$Class, Prediksi=output$net.result)
roundedresults <- sapply(results, round, digits=0)
actual <- data_testing$Class
prediction <- output$net.result
colnames(prediction) = c("hasil")
# Mengelompokkan hasil prediksi ke dalam kategori
prediction <- ifelse(prediction >= 0 & prediction < 0.2, 0,
ifelse(prediction >= 0.2 & prediction < 0.4, 0.25,
ifelse(prediction >= 0.4 & prediction < 0.8, 0.5,
ifelse(prediction >= 0.4 & prediction < 0.8, 0.75,
ifelse(prediction >= 0.8 & prediction <= 1, 1,NA)
)
)
)
)
# Buatlah faktor dari hasil prediksi
prediction <- factor(prediction, levels = c(0, 0.25, 0.5, 0.75, 1), labels = c(0, 0.25,0.5,0.75,1))
table(actual)
table(prediction)
# Buat confusion matrix
mtab <- table(actual, prediction)
confusionMatrix(mtab)
library(dslabs)
library(tidyverse)
library(dplyr)
library(here)
library(readxl)
library(utils)
library(vroom)
library(tidytext)
library(readr)
library(here)
library(keras)
library(caret)
library(dplyr)
library(neuralnet)
data_testing <- read_csv(here("nursery_testing.csv"))
head(data_testing)
unique(data_testing$Parent)
unique(data_testing$Has_Nurs)
unique(data_testing$Form)
unique(data_testing$Children)
unique(data_testing$Housing)
unique(data_testing$Finance)
unique(data_testing$Social)
unique(data_testing$Health)
unique(data_testing$Class)
data_training <- read_csv(here("nursery_training.csv"))
head(data_training)
unique(data_training$Parent)
unique(data_training$Has_Nurs)
unique(data_training$Form)
unique(data_training$Children)
unique(data_training$Housing)
unique(data_training$Finance)
unique(data_training$Social)
unique(data_training$Health)
unique(data_training$Class)
names(data_training)
convert_column_to_index <- function(column_data, reference_vector) {
return(match(column_data, reference_vector) - 1)
}
columns_to_process <- names(data_training)
reference_vectors <- lapply(data_training[, columns_to_process, drop = FALSE], unique)
for (col_name in columns_to_process) {
reference_vector <- reference_vectors[[col_name]]
reference_vectors
data_training[[col_name]] <- convert_column_to_index(data_training[[col_name]], reference_vector)
}
colSums(is.na(data_training))
names(data_testing)
convert_column_to_index <- function(column_data, reference_vector) {
return(match(column_data, reference_vector) - 1)
}
columns_to_process <- names(data_testing)
reference_vectors <- lapply(data_testing[, columns_to_process, drop = FALSE], unique)
reference_vector
for (col_name in columns_to_process) {
reference_vector <- reference_vectors[[col_name]]
data_testing[[col_name]] <- convert_column_to_index(data_testing[[col_name]], reference_vector)
}
colSums(is.na(data_testing))
for (i in names(data_testing)) {
data_testing[i] <- (data_testing[i] - min(data_testing[i]))/(max(data_testing[i]) - min(data_testing[i]))
}
for (i in names(data_training)) {
data_training[i] <- (data_training[i] - min(data_training[i]))/(max(data_training[i]) - min(data_training[i]))
}
n <- neuralnet(
~.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
n <- neuralnet(
~.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
n <- neuralnet(
~Class,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
plot(n)
output <- compute(n, data_testing[,-9])
n <- neuralnet(
~.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
n <- neuralnet(
~.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
n <- neuralnet(
~.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
n <- neuralnet(
~.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
output <- compute(n, data_testing[,-9])
View(data_training)
n <- neuralnet(
.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
n <- neuralnet(
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
n <- neuralnet(
~.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
knitr::opts_chunk$set(echo = TRUE)
n <- neuralnet(
~.Class,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
n <- neuralnet(
~.class,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
View(data_training)
n <- neuralnet(
~.class,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
n <- neuralnet(
~class,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
n <- neuralnet(
~Class,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
plot(n)
output <- compute(n, data_testing[,-9])
View(data_testing)
n <- neuralnet(
~.Class,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
n <- neuralnet(
~Class,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
plot(n)
output <- compute(n, data_testing[,-9])
View(data_testing)
actual <- round(data_testing$Class, digits = 0)
prediction <- round(output$net.result, digits = 0)
mtab <- table(actual,prediction)
confusionMatrix(mtab)
output <- compute(n, data_testing[,-9])
View(data_testing)
output <- compute(n, data_testing[,-10])
output <- compute(n, data_testing[,-9])
View(data_testing)
library(dslabs)
library(tidyverse)
library(dplyr)
library(here)
library(readxl)
library(utils)
library(vroom)
library(tidytext)
library(readr)
library(here)
library(keras)
library(caret)
library(dplyr)
library(neuralnet)
data_testing <- read_csv(here("nursery_testing.csv"))
head(data_testing)
unique(data_testing$Parent)
unique(data_testing$Has_Nurs)
unique(data_testing$Form)
unique(data_testing$Children)
unique(data_testing$Housing)
unique(data_testing$Finance)
unique(data_testing$Social)
unique(data_testing$Health)
unique(data_testing$Class)
data_training <- read_csv(here("nursery_training.csv"))
head(data_training)
unique(data_training$Parent)
unique(data_training$Has_Nurs)
unique(data_training$Form)
unique(data_training$Children)
unique(data_training$Housing)
unique(data_training$Finance)
unique(data_training$Social)
unique(data_training$Health)
unique(data_training$Class)
names(data_training)
convert_column_to_index <- function(column_data, reference_vector) {
return(match(column_data, reference_vector) - 1)
}
columns_to_process <- names(data_training)
reference_vectors <- lapply(data_training[, columns_to_process, drop = FALSE], unique)
for (col_name in columns_to_process) {
reference_vector <- reference_vectors[[col_name]]
reference_vectors
data_training[[col_name]] <- convert_column_to_index(data_training[[col_name]], reference_vector)
}
colSums(is.na(data_training))
names(data_testing)
convert_column_to_index <- function(column_data, reference_vector) {
return(match(column_data, reference_vector) - 1)
}
columns_to_process <- names(data_testing)
reference_vectors <- lapply(data_testing[, columns_to_process, drop = FALSE], unique)
reference_vector
for (col_name in columns_to_process) {
reference_vector <- reference_vectors[[col_name]]
data_testing[[col_name]] <- convert_column_to_index(data_testing[[col_name]], reference_vector)
}
colSums(is.na(data_testing))
for (i in names(data_testing)) {
data_testing[i] <- (data_testing[i] - min(data_testing[i]))/(max(data_testing[i]) - min(data_testing[i]))
}
for (i in names(data_training)) {
data_training[i] <- (data_training[i] - min(data_training[i]))/(max(data_training[i]) - min(data_training[i]))
}
n <- neuralnet(
~Class,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
plot(n)
output <- compute(n, data_testing[,-9])
n <- neuralnet(
~Class.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
n <- neuralnet(
~Class .,
n <- neuralnet(
~Class,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
plot(n)
output <- compute(n, data_testing[,-9])
output <- compute(n, data_testing[,-8])
results <- data.frame(DataAsli=data_testing$Class, Prediksi=output$net.result)
roundedresults <- sapply(results, round, digits=0)
actual <- round(data_testing$Class, digits = 0)
prediction <- round(output$net.result, digits = 0)
mtab <- table(actual,prediction)
confusionMatrix(mtab)
actual <- data_testing$Class
prediction <- output$net.result
colnames(prediction) = c("hasil")
# Mengelompokkan hasil prediksi ke dalam kategori
prediction <- ifelse(prediction >= 0 & prediction < 0.2, 0,
ifelse(prediction >= 0.2 & prediction < 0.4, 0.25,
ifelse(prediction >= 0.4 & prediction < 0.8, 0.5,
ifelse(prediction >= 0.4 & prediction < 0.8, 0.75,
ifelse(prediction >= 0.8 & prediction <= 1, 1,NA)
)
)
)
)
# Buatlah faktor dari hasil prediksi
prediction <- factor(prediction, levels = c(0, 0.25, 0.5, 0.75, 1), labels = c(0, 0.25,0.5,0.75,1))
table(actual)
table(prediction)
# Buat confusion matrix
mtab <- table(actual, prediction)
confusionMatrix(mtab)
n <- neuralnet(
Class~,
n <- neuralnet(
Class~.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
plot(n)
n <- neuralnet(
Class~.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
plot(n)
output <- compute(n, data_testing[,-9])
results <- data.frame(DataAsli=data_testing$Class, Prediksi=output$net.result)
roundedresults <- sapply(results, round, digits=0)
actual <- round(data_testing$Class, digits = 0)
prediction <- round(output$net.result, digits = 0)
mtab <- table(actual,prediction)
confusionMatrix(mtab)
actual <- data_testing$Class
prediction <- output$net.result
colnames(prediction) = c("hasil")
# Mengelompokkan hasil prediksi ke dalam kategori
prediction <- ifelse(prediction >= 0 & prediction < 0.2, 0,
ifelse(prediction >= 0.2 & prediction < 0.4, 0.25,
ifelse(prediction >= 0.4 & prediction < 0.8, 0.5,
ifelse(prediction >= 0.4 & prediction < 0.8, 0.75,
ifelse(prediction >= 0.8 & prediction <= 1, 1,NA)
)
)
)
)
# Buatlah faktor dari hasil prediksi
prediction <- factor(prediction, levels = c(0, 0.25, 0.5, 0.75, 1), labels = c(0, 0.25,0.5,0.75,1))
table(actual)
table(prediction)
# Buat confusion matrix
mtab <- table(actual, prediction)
confusionMatrix(mtab)
n <- neuralnet(
Class~.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
plot(n)
n <- neuralnet(
Class~.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
plot(n)
n <- neuralnet(
Class~.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
plot(n)
output <- compute(n, data_testing[,-9])
results <- data.frame(DataAsli=data_testing$Class, Prediksi=output$net.result)
roundedresults <- sapply(results, round, digits=0)
actual <- round(data_testing$Class, digits = 0)
prediction <- round(output$net.result, digits = 0)
mtab <- table(actual,prediction)
confusionMatrix(mtab)
n <- neuralnet(
Class~.,
data = data_training,
hidden = c(5,3),
err.fct = "sse",
linear.output = FALSE)
plot(n)
output <- compute(n, data_testing[,-9])
results <- data.frame(DataAsli=data_testing$Class, Prediksi=output$net.result)
roundedresults <- sapply(results, round, digits=0)
actual <- round(data_testing$Class, digits = 0)
prediction <- round(output$net.result, digits = 0)
mtab <- table(actual,prediction)
confusionMatrix(mtab)
actual <- data_testing$Class
prediction <- output$net.result
colnames(prediction) = c("hasil")
# Mengelompokkan hasil prediksi ke dalam kategori
prediction <- ifelse(prediction >= 0 & prediction < 0.2, 0,
ifelse(prediction >= 0.2 & prediction < 0.4, 0.25,
ifelse(prediction >= 0.4 & prediction < 0.8, 0.5,
ifelse(prediction >= 0.4 & prediction < 0.8, 0.75,
ifelse(prediction >= 0.8 & prediction <= 1, 1,NA)
)
)
)
)
# Buatlah faktor dari hasil prediksi
prediction <- factor(prediction, levels = c(0, 0.25, 0.5, 0.75, 1), labels = c(0, 0.25,0.5,0.75,1))
table(actual)
table(prediction)
# Buat confusion matrix
mtab <- table(actual, prediction)
confusionMatrix(mtab)
